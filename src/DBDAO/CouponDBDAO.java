package DBDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import DAO.CouponDAO;
import beans.Coupon;
import beans.CouponType;
import connections.ConnectionPool;
import connections.SqlUtility;
import core.CouponSystemException;

public class CouponDBDAO implements CouponDAO {

	private ConnectionPool connectionPool;
	
	public CouponDBDAO() {
		connectionPool = ConnectionPool.getInstance();
	}
	
	@Override
	public void createCoupon(long CompanyId, Coupon coupon) {
		
		Connection connection = connectionPool.getConnection();
		
		String sql = null;
		PreparedStatement preparedSt = null;
		ResultSet generatedInfo = null;
		
		try {
			
			connection.setAutoCommit(false);
			
			sql = "INSERT INTO coupon(title, start_date, end_date, amount, coupon_type, message, price, image) VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
			preparedSt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedSt.setString(1, coupon.getTitle());
			preparedSt.setDate(2, new java.sql.Date(coupon.getStartDate().getTime()));
			preparedSt.setDate(3, new java.sql.Date(coupon.getEndDate().getTime()));
			preparedSt.setInt(4, coupon.getAmount());
			preparedSt.setString(5, coupon.getType().toString());
			preparedSt.setString(6, coupon.getMessage());
			preparedSt.setDouble(7, coupon.getPrice());
			preparedSt.setString(8, coupon.getImage());
			preparedSt.executeUpdate();
			
			// get coupon autogenerated key
			generatedInfo = preparedSt.getGeneratedKeys();
			
			long generatedId = 0;
			if (generatedInfo.next()) {
				
				generatedId = generatedInfo.getLong(1);
			} else {
				// TODO some error retreiving generated ID
			}
			preparedSt.close();
			
			// adding information to the JOIN table of company-coupon
			sql = "INSERT INTO company_coupon VALUES(?, ?)";
			preparedSt = connection.prepareStatement(sql);
			
			preparedSt.setLong(1, CompanyId);
			preparedSt.setLong(2, generatedId);
			preparedSt.executeUpdate();
			
			connection.commit();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			SqlUtility.rollbackConnection(connection);
			
		} finally {
			
			SqlUtility.closeStatement(preparedSt);
			SqlUtility.closeResultSet(generatedInfo);
			connectionPool.returnConnection(connection);
		}
		
	}

	@Override
	public void removeCoupon(Coupon coupon) {

		Connection connection = connectionPool.getConnection();
		String sql = null;
		PreparedStatement preparedSt = null;
		
		try {
			
			connection.setAutoCommit(false);
			
			long couponId = coupon.getId();
			sql = "DELETE FROM customer_coupon WHERE coupon_id = ?";
			preparedSt = connection.prepareStatement(sql);
			
			preparedSt.setLong(1, couponId);
			preparedSt.executeQuery();
			preparedSt.close();
			
			sql = "DELETE FROM company_coupon WHERE coupon_id = ?";
			preparedSt = connection.prepareStatement(sql);
			preparedSt.close();
			
			preparedSt.setLong(1, couponId);
			preparedSt.executeQuery();
			preparedSt.close();
			
			sql = "DELETE FROM coupon WHERE id = ?";
			preparedSt = connection.prepareStatement(sql);
			preparedSt.close();
			
			preparedSt.setLong(1, couponId);
			preparedSt.executeQuery();
			
			connection.commit();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			SqlUtility.rollbackConnection(connection);
			
		} finally {
			
			SqlUtility.closeStatement(preparedSt);
			connectionPool.returnConnection(connection);
		}
	}

	@Override
	public void updateCoupon(Coupon coupon) {

		Connection connection = connectionPool.getConnection();
		PreparedStatement preparedSt = null;
		
		try {
			
			String sql = "UPDATE coupon SET title = ?, start_date = ?, end_date = ?, amount = ?, coupon_type = ?, message = ?, price = ?, image = ? WHERE id = ?";
			
			preparedSt = connection.prepareStatement(sql);
			preparedSt.setString(1, coupon.getTitle());
			preparedSt.setDate(2, new java.sql.Date(coupon.getStartDate().getTime()));
			preparedSt.setDate(3, new java.sql.Date(coupon.getEndDate().getTime()));
			preparedSt.setInt(4, coupon.getAmount());
			preparedSt.setString(5, coupon.getType().toString());
			preparedSt.setString(6, coupon.getMessage());
			preparedSt.setDouble(7, coupon.getPrice());
			preparedSt.setString(8, coupon.getImage());
			preparedSt.setLong(9, coupon.getId());
			preparedSt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		} finally {
			
			SqlUtility.closeStatement(preparedSt);
			connectionPool.returnConnection(connection);
		}
	}

	@Override
	public boolean isTitleExists(String title) {
		
		Connection connection = connectionPool.getConnection();
		String sql = "SELECT coupon.title FROM coupon WHERE coupon.title = '" + title + "' FETCH FIRST ROW ONLY";
		Statement statement = null;
		ResultSet result = null;
		boolean flag = false;
		
		try {
			
			statement = connection.createStatement();
			result = statement.executeQuery(sql);
			if (result.next()) flag = true;
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		} finally {
			
			SqlUtility.closeStatement(statement);
			SqlUtility.closeResultSet(result);
			connectionPool.returnConnection(connection);
		}
		return flag;
	}

	@Override
	public Coupon getCoupon(long id) {
		
		String sql = null;
		Coupon coupon = null;
		Connection connection = connectionPool.getConnection();
		Statement statement = null;
		ResultSet result = null;
		
		try {
			
			sql = "SELECT * FROM coupon WHERE coupon.id = " + id + " FETCH FIRST ROW ONLY";
			statement = connection.createStatement();
			result = statement.executeQuery(sql);
			if (result.next()) {
				
				coupon = new Coupon(result.getString(2), new java.util.Date(result.getDate(3).getTime()), new java.util.Date(result.getDate(4).getTime()), result.getInt(5), CouponType.valueOf(result.getString(6)), result.getString(7), result.getDouble(8), result.getString(9));
				coupon.setCouponId(id);
				
			} else {
				// TODO throw ecxeption
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		} finally {
			
			SqlUtility.closeStatement(statement);
			SqlUtility.closeResultSet(result);
			connectionPool.returnConnection(connection);
		}
		return coupon;
	}

	@Override
	public List<Coupon> getAllCoupons() {
		
		Connection connection = connectionPool.getConnection();
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = "SELECT * FROM coupon";
		List<Coupon> couponList = new ArrayList<>();
		
		try {
			
			statement = connection.createStatement();
			resultSet = statement.executeQuery(sql);
			while (resultSet.next()) {
				
				Coupon coupon = new Coupon(resultSet.getString(2), resultSet.getDate(3), resultSet.getDate(4), resultSet.getInt(5), CouponType.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getDouble(8), resultSet.getString(9));
				coupon.setCouponId(resultSet.getLong(1));
				couponList.add(coupon);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		} finally {
			
			SqlUtility.closeStatement(statement);
			SqlUtility.closeResultSet(resultSet);
			connectionPool.returnConnection(connection);
		}
		return couponList;
	}

	@Override
	public List<Coupon> getAllCouponsCompany(long companyId) {

		Connection connection = connectionPool.getConnection();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String sql = "SELECT id, title, start_date, end_date, amount, coupon_type, message, price, image FROM coupon cu INNER JOIN company_coupon cycu ON cu.id = cycu.coupon_id WHERE cycu.comp_id = ?";
		List<Coupon> couponList = new ArrayList<>();
		
		try {
			
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, companyId);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				
				Coupon coupon = new Coupon(resultSet.getString(2), resultSet.getDate(3), resultSet.getDate(4), resultSet.getInt(5), CouponType.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getDouble(8), resultSet.getString(9));
				coupon.setCouponId(resultSet.getLong(1));
				couponList.add(coupon);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			
			SqlUtility.closeStatement(preparedStatement);
			SqlUtility.closeResultSet(resultSet);
			connectionPool.returnConnection(connection);
		}
		return couponList;
	}

	@Override
	public List<Coupon> getCouponsCompanyByType(long companyId, CouponType type) {

		Connection connection = connectionPool.getConnection();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String sql = "SELECT id, title, start_date, end_date, amount, coupon_type, message, price, image FROM coupon cu INNER JOIN company_coupon cycu ON cu.id = cycu.coupon_id WHERE cycu.comp_id = ? AND cu.coupon_type = ?";
		List<Coupon> couponList = new ArrayList<>();
		
		try {
			
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, companyId);
			preparedStatement.setString(2, type.toString());
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				
				Coupon coupon = new Coupon(resultSet.getString(2), resultSet.getDate(3), resultSet.getDate(4), resultSet.getInt(5), CouponType.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getDouble(8), resultSet.getString(9));
				coupon.setCouponId(resultSet.getLong(1));
				couponList.add(coupon);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			
			SqlUtility.closeStatement(preparedStatement);
			SqlUtility.closeResultSet(resultSet);
			connectionPool.returnConnection(connection);
		}
		return couponList;
	}

	@Override
	public List<Coupon> getAllpurchasedCoupons(long customerId) {

		Connection connection = connectionPool.getConnection();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String sql = "SELECT id, title, start_date, end_date, amount, coupon_type, message, price, image FROM coupon cu INNER JOIN customer_coupon cucu ON cu.id = cucu.coupon_id WHERE cucu.cust_id = ?";
		List<Coupon> couponList = new ArrayList<>();
		
		try {
			
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, customerId);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				
				Coupon coupon = new Coupon(resultSet.getString(2), resultSet.getDate(3), resultSet.getDate(4), resultSet.getInt(5), CouponType.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getDouble(8), resultSet.getString(9));
				coupon.setCouponId(resultSet.getLong(1));
				couponList.add(coupon);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			
			SqlUtility.closeStatement(preparedStatement);
			SqlUtility.closeResultSet(resultSet);
			connectionPool.returnConnection(connection);
		}
		return couponList;
	}

	@Override
	public List<Coupon> getAllpurchasedCouponByType(long customerId, CouponType type) {

		Connection connection = connectionPool.getConnection();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String sql = "SELECT id, title, start_date, end_date, amount, coupon_type, message, price, image FROM coupon cu INNER JOIN customer_coupon cucu ON cu.id = cucu.coupon_id WHERE cucu.cust_id = ? AND cu.coupon_type = ?";
		List<Coupon> couponList = new ArrayList<>();
		
		try {
			
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, customerId);
			preparedStatement.setString(2, type.toString());
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				
				Coupon coupon = new Coupon(resultSet.getString(2), resultSet.getDate(3), resultSet.getDate(4), resultSet.getInt(5), CouponType.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getDouble(8), resultSet.getString(9));
				coupon.setCouponId(resultSet.getLong(1));
				couponList.add(coupon);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			
			SqlUtility.closeStatement(preparedStatement);
			SqlUtility.closeResultSet(resultSet);
			connectionPool.returnConnection(connection);
		}
		return couponList;
	}

	@Override
	public List<Coupon> getAllpurchasedCouponByPrice(long customerId, double price) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Coupon getCouponByTitle(String title) throws CouponSystemException {
		
		Connection connection = connectionPool.getConnection();
		String sql = "SELECT * FROM coupon WHERE coupon.title = '" + title + "' FETCH FIRST ROW ONLY";
		Statement statement = null;
		ResultSet result = null;
		Coupon coupon = null;
		
		try {
			
			statement = connection.createStatement();
			result = statement.executeQuery(sql);
			if (result.next()) {
				
				coupon = new Coupon(result.getString(2), result.getDate(3), result.getDate(4), result.getInt(5), CouponType.valueOf(result.getString(6)), result.getString(7), result.getDouble(8), result.getString(9));
				coupon.setCouponId(result.getLong(1));
			} else {
				
				throw new CouponSystemException("coupon does not exist");
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		} finally {
			
			SqlUtility.closeStatement(statement);
			SqlUtility.closeResultSet(result);
			connectionPool.returnConnection(connection);
		}
		return coupon;
	}

}
